name: Weekly Test of Localstack deploy on EKS

on:
  schedule:
    - cron: '0 9 * * 1'  # Run every Monday at 9:00 UTC
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'

      

jobs:
  test:
    runs-on: ubuntu-latest
    environment: CI
    timeout-minutes: 30
    steps:

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Install Dependencies
      env:
        EKSCTL_VERSION: v0.174.0
        EKSCTL_ANYWHERE_VERSION: v0.19.1
        AWS_IAM_AUTHENTICATOR_VERSION: v0.6.14
        KUBECTL_VERSION: v1.29.1
        YQ_VERSION: v4.40.7
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          run-one \
          make \
          unzip \
          tar

        ARCH=$(uname -m)
        if [ "$ARCH" = "x86_64" ]; then
          ARCH="amd64"
        elif [ "$ARCH" = "aarch64" ]; then
          ARCH="arm64"
        elif [ "$ARCH" = "armv6l" ]; then
          ARCH="armv6"
        elif [ "$ARCH" = "armv7l" ]; then
          ARCH="armv7"
        fi

        # Install yq
        sudo wget https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64 -O /usr/bin/yq && \
        sudo chmod +x /usr/bin/yq
        
        # Install eksctl.
        PLATFORM=$(uname -s)_$ARCH
        curl -sLO "https://github.com/eksctl-io/eksctl/releases/download/${EKSCTL_VERSION}/eksctl_$PLATFORM.tar.gz"
        curl -sL "https://github.com/eksctl-io/eksctl/releases/download/${EKSCTL_VERSION}/eksctl_checksums.txt" | grep $PLATFORM | sha256sum --check
        tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
        sudo mv /tmp/eksctl /usr/local/bin

        # Install eksctl anywhere plugin.
        EKS_ANYWHERE_TARBALL_URL=$(curl https://anywhere-assets.eks.amazonaws.com/releases/eks-a/manifest.yaml --silent --location | yq ".spec.releases[] | select(.version==\"$EKSCTL_ANYWHERE_VERSION\").eksABinary.$(uname -s | tr A-Z a-z).uri")
        curl $EKS_ANYWHERE_TARBALL_URL \
          --silent --location \
          | tar xz ./eksctl-anywhere
        sudo install -m 0755 ./eksctl-anywhere /usr/local/bin/eksctl-anywhere

        # Install aws-iam-authenticator.
        sudo wget https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/${AWS_IAM_AUTHENTICATOR_VERSION}/aws-iam-authenticator_${AWS_IAM_AUTHENTICATOR_VERSION}_linux_amd64 -O /usr/bin/aws-iam-authenticator && \
        sudo chmod +x /usr/bin/aws-iam-authenticator

        curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl" && \
        sudo install -m 0755 kubectl /usr/local/bin/kubectl

    - name: Setup EKS anywhere
      env:
        NS_NUM: "0"
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        # Unset stale org secret.
        printenv
        unset LOCALSTACK_API_KEY

        # Source all env vars.
        source .env

        make local-create-cluster
        kubectl get pods --all-namespaces

        aws s3 cp s3://localstack-releases/localstack-k8s-operator/localstack-k8s-operator-v0.1.1.tar .
        tar -xvf localstack-k8s-operator-v0.1.1.tar
        kubectl apply -f localstack-k8s-operator-v0.1.1/release/

    - name: Deploy Localstack
      env:
        LOCALSTACK_AUTH_TOKEN: ${{ secrets.LOCALSTACK_AUTH_TOKEN }}
        NS_NUM: "0"
      run: |
        source .env
        export KUBECONFIG=$PWD/$CLUSTER_NAME/$CLUSTER_NAME-eks-a-cluster.kubeconfig
        make create-namespace NS_NUM=$NS_NUM
        make deploy-localstack NS_NUM=$NS_NUM
    
    - name: Copy Test Script
      env:
        NS_NUM: "0"
      run: |
        source .env
        export KUBECONFIG=$PWD/$CLUSTER_NAME/$CLUSTER_NAME-eks-a-cluster.kubeconfig
        kubectl wait --for=condition=ready pod -l app=devxpod -n ls$NS_NUM --timeout=300s
        DEV_POD_NAME=$(kubectl get pods -l app=devxpod -n ls$NS_NUM -o jsonpath="{.items[0].metadata.name}")
        kubectl cp .github/helpers/test.sh ls$NS_NUM/$DEV_POD_NAME:/tmp/test.sh -n ls$NS_NUM

    - name: Run Test Script
      env:
        NS_NUM: "0"
      run: |
        source .env
        export KUBECONFIG=$PWD/$CLUSTER_NAME/$CLUSTER_NAME-eks-a-cluster.kubeconfig
        run-one-until-success make exec-devpod-noninteractive NS_NUM=$NS_NUM CMD="ls"
        make exec-devpod-noninteractive NS_NUM=$NS_NUM CMD="FORCE_INTERACTIVE=yes bash -lic 'source ~/.bashrc && chmod +x /tmp/test.sh && /tmp/test.sh'"

    - name: Cleanup
      env:
        NS_NUM: "0"
      run: |
        source .env
        export KUBECONFIG=$PWD/$CLUSTER_NAME/$CLUSTER_NAME-eks-a-cluster.kubeconfig
        make deploy-cleanup NS_NUM=$NS_NUM
        sudo make local-delete-cluster NS_NUM=$NS_NUM
